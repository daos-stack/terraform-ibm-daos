#!/bin/bash
#
# user_data script for DAOS server instances
#


ACD_DIR="$${ACD_DIR:-/opt/ansible-collection-daos}"
ACD_VENV_DIR="$${ACD_DIR}/venv"
ACD_VARS_FILE="$${ACD_DIR}/vars.yml"

ANSIBLE_DEPRECATION_WARNINGS=False

install_ansible() {
  curl --no-sessionid -s ${ansible_install_script_url} | /bin/bash
}

activate_venv() {
  if [[ -z $VIRTUAL_ENV ]]; then
    source "$${ACD_VENV_DIR}/bin/activate"
  fi
}

install_collection() {
  local name="$1"
  local url="$2"

  if ! ansible-galaxy collection list | grep -q $${name}; then
    echo "Installing Ansible Collection: $${name}"
    ansible-galaxy collection install \
      --clear-response-cache \
      --force-with-deps \
      "$${url}"
  else
    echo "Collection already installed: $${name}"
  fi
}

get_vmd_status() {
  DAOS_DISABLE_VMD=true
  if lspci | grep -q "Volume Management Device"; then
    DAOS_DISABLE_VMD=false
  fi
}

get_bdev_list() {
  # get list of PCIe addresses for nvme drives
  if [[ "$${DAOS_DISABLE_VMD}" == "false" ]]; then
    echo "VMD is enabled"
    DAOS_BDEV_LIST="$(daos_server dump-topology | grep -i nvme | \
      awk '{print $1}' | uniq | xargs | \
      sed -e 's/^/"/' -e 's/$/"/' -e 's/ /","/g')"
  else
    # TODO: might be able to use `daos_server dump-topology` here also
    #       need to test on a system that does not have VMD
    DAOS_BDEV_LIST=$(nvme list-subsys | grep live | sort --version-sort | \
      awk '{print $4}' | xargs | sed -e 's/^/"/' -e 's/$/"/' -e 's/ /","/g')
  fi
}

# TODO: Have Terraform generate a vars file from a template.
#       The file should be stored in a location where this user data script
#       can retrieve it.
create_vars_file() {
  # use 75% of free mem for scm
  local scm_size=$(free -m |awk 'NR==2 {print ($4*.75) }')
  local disk_count=$(nvme list-subsys | grep live | wc -l)
  local targets=$${disk_count}
  local nr_hugepages=$((($${disk_count} * 1048576) / 2048 ))
  get_bdev_list

  cat > "$${ACD_VARS_FILE}" <<EOF
tune_allow_reboot: true
tune_tuned_profile: daos-ibm
tune_iommu_enable: true
tune_nic_default_ipv4_mtu: 9000
tune_nic_queues_auto_enabled: false
tune_nic_queues_combined: 16
tune_tuned_daos_profile:
  main:
    summary: Customized network-latency tuned profile for DAOS
    include: network-latency
  sysctl:
    ## Per CCE-80916-0: Set kernel.randomize_va_space: 2
    kernel.randomize_va_space: 2
    net.ipv4.tcp_max_syn_backlog: 65536
    net.ipv4.tcp_timestamps: 0
    net.ipv4.tcp_sack: 1
    net.core.netdev_max_backlog: 250000
    net.core.rmem_max: 16777216
    net.core.wmem_max: 16777216
    net.core.rmem_default: 16777216
    net.core.wmem_default: 16777216
    net.core.optmem_max: 16777216
    net.ipv4.tcp_rmem: 4096 87380 16777216
    net.ipv4.tcp_wmem: 4096 65536 16777216
    net.ipv4.tcp_low_latency: 1
    net.ipv4.tcp_adv_win_scale: 1
    net.core.somaxconn: 2048
    net.ipv4.neigh.ens1.gc_stale_time: 2000000
    net.ipv4.neigh.ens1.base_reachable_time_ms: 120000
    net.ipv4.neigh.ens1.mcast_solicit: 18

daos_roles:
  - server

daos_access_points: ${jsonencode(access_points)}
daos_server_nr_hugepages: $${nr_hugepages}

daos_server_engines:
  - targets: $${targets}
    nr_xs_helpers: 0
    first_core: 0
    bypass_health_chk: "true"
    fabric_iface: "{{ ansible_default_ipv4.interface }}"
    fabric_iface_port: 31316
    log_mask: ERR
    log_file: "{{ daos_server_log_dir }}/daos_engine.0.log"
    env_vars:
      - "FI_OFI_RXM_DEF_TCP_WAIT_OBJ=pollfd"
      - "DTX_AGG_THD_CNT=16777216"
      - "DTX_AGG_THD_AGE=700"
      - ABT_THREAD_STACKSIZE=65536
      - ABT_STACK_OVERFLOW_CHECK=mprotect
    storage:
      - scm_mount: /var/daos/ram
        class: ram
        scm_size: $${scm_size}
      - class: nvme
        bdev_list: [$${DAOS_BDEV_LIST}]

EOF
}

run_playbooks() {
%{ for ap in ansible_playbooks }
  # Playbook: ${ap.playbook_fqn}"
  install_collection "${ap.collection_fqn}" "${ap.collection_git_url}"

  echo "Running playbook: ${ap.playbook_fqn}"
  echo "ansible-playbook -c local -i '127.0.0.1,' -u root --extra-vars=\"@$${ACD_VARS_FILE}\" ${ap.playbook_fqn}"
  ansible-playbook -c local -i '127.0.0.1,' -u root --extra-vars="@$${ACD_VARS_FILE}" ${ap.playbook_fqn}
%{ endfor }
}

main() {
  install_ansible
  activate_venv
  create_vars_file
  run_playbooks
}

main
